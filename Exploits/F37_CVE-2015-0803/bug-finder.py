#!/usr/local/bin/python

# Search through code base for strings
# See diff history for files and get diffs from time range

import os, glob, fnmatch
from parsedgit import ParsedGit

def find_files(directory, filename):
    matches = []
    for root, dirnames, filenames in os.walk(directory):
        for filename in fnmatch.filter(filenames, filename):
            matches.append(os.path.join(root, filename))
    return matches

def print_commits(commits, just_code=False):
    for commit in commits:
        print "*"*100
        print "Diff for commit: {0}".format(commit[0])
        print "*"*100
        diff = pg.get_commit_info(file, commit[0])
        if just_code:
            diff = diff.split("\n")
            print_lines = False
            for line in diff:
                if print_lines:
                    print line
                if "diff --git" in line:
                    print_lines = True
        else:
            print diff

git_directory = os.path.dirname(os.path.realpath(__file__)) + "/gecko-dev"
filenames = ["HTMLSourceElement.cpp", "asdf"]
pg = ParsedGit(git_directory)
timeframe = ["2015-02-09", None]

# files = [find_files(git_directory, x) for x in filenames]
files = [["/Users/breadchris/Documents/Reversing/gecko-dev/dom/html/HTMLSourceElement.cpp"]]

# Find commits for files and print them out
for n,matches in enumerate(files):
    if len(matches) == 0:
        print "[-] No files found for: {0}".format(filenames[n])
    for file in matches:
        commits = pg.get_commits_in_time_range(file, timeframe[0], timeframe[1])
        print_commits(commits)
    
