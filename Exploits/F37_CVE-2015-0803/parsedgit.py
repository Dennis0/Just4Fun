import git

class ParsedGit:
    def __init__(self, directory):
        self.git_repo = git.Git(directory)
        self.repo = git.Repo(directory)

    def get_commits_for_file(self, filename, pretty="format:%h %cd", parse_func=None,
            log_options=[]):
        base_options = ['--pretty={0}'.format(pretty), '--date=short', '--follow',  '--', filename]
        log_args = log_options + base_options
        out = self.git_repo.log(*log_args)
        commits = parse_func(out) if parse_func \
                    else [x.split(" ") for x in out.split("\n")]
        return commits

    def get_commits_in_time_range(self, filename, startdate, enddate):
        log_options = []
        if startdate != None:
            log_options.append("--after={0}".format(startdate))
        if enddate != None:
            log_options.append("--before={0}".format(enddate))
        return self.get_commits_for_file(filename, log_options=log_options)

    def get_commits(self):
        return list(self.repo.iter_commits())

    def get_changed_files(self):
        changed_files = []
        commits_list = self.get_commits()
         
        for x in commits_list[0].diff(commits_list[-1]):
            if x.a_blob.path not in changed_files:
                changed_files.append(x.a_blob.path)
                
            if x.b_blob is not None and x.b_blob.path not in changed_files:
                changed_files.append(x.b_blob.path)
                
        return changed_files

    def get_commit_info(self, filename, commit_hash):
        return self.git_repo.show(commit_hash, "--", filename)
            
